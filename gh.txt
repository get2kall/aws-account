name: Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      images:
        description: 'Docker images to be processed'
        required: true

permissions:
  id-token: write
  contents: read

jobs:

  image-list:
    name: Generate List of Latest Images
    runs-on: ubuntu-22.04

    outputs:
      matrix: ${{ steps.image-list.outputs.matrix }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3.5.2

    - name: Write input images to file
      run: |
        echo "${{ github.event.inputs.images }}" > images.txt

    - name: Install JQ
      run: sudo apt-get install jq

    - name: Get Image list
      id: image-list
      run: |
        content=$(cat images.txt)
        json_content=$(jq -R -s -c 'split("\n")[:-1] | map(split("/")) | map(split(":")) | map({registry: .[0], image: .[1], version: .[2]})' <<< "$content")
        json_content="{\"include\":$json_content}"
        echo "matrix=$json_content" >> $GITHUB_ENV

  update_images:
    name: Update ${{ matrix.registry }}/${{ matrix.image }}:${{ matrix.version }}
    needs: image-list
    runs-on: org-runner
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.image-list.outputs.matrix)}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3.5.2

      - name: install snyk
        run: |
          curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod 777 ./snyk
          sudo mv ./snyk /usr/local/bin/
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Login to Artifactory
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ secrets.ARTIFACTORY_URL }}
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout repo
        uses: actions/checkout@v3.5.2

      - name: Install AWS CLi v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          echo "Verify aws version"
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "arn:aws:iam::590360573099:role/ecr-custom-role"
          aws-region: us-east-1
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        if: ${{ matrix.registry == '590360573099.dkr.ecr.us-east-1.amazonaws.com' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create directories for history and failures
        run: |
          mkdir -p ${{ github.workspace }}/history
          mkdir -p ${{ github.workspace }}/failures

      - name: Run Shell Script
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          chmod +x syncImages.sh
          if ./syncImages.sh -i ${{ matrix.registry }}/${{ matrix.image }}:${{ matrix.version }} --scanTool snyk; then
            mv images.txt ${{ github.workspace }}/history/
          else
            mv images.txt ${{ github.workspace }}/failures/
          fi

      - name: Upload history and failures as workflow artifacts
        uses: actions/upload-artifact@v2
        with:
          name: image-lists
          paths: 
          - ${{ github.workspace }}/history/
          - ${{ github.workspace }}/failures/




his script accepts a list of images as an input when triggered manually through the workflow_dispatch event. This list is written to the images.txt file and then processed in the same way as before. The script also moves the image list to a history or failures directory based on the outcome of the syncImages.sh script and then uploads these directories as workflow artifacts.
