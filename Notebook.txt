import os
import json

# Read non-empty lines from images.txt into a list
with open('images.txt', 'r') as f:
    lines = f.read().splitlines()

# Filter out empty lines
lines = [line for line in lines if line.strip()]

# Process lines
matrix = []
for line in lines:
    split_line = line.split(':')
    
    # Default to 'latest' version if not specified
    if len(split_line) < 2:
        split_line.append('latest')
    
    split_image = split_line[0].split('/')
    
    # Default to 'docker.io' registry if not specified
    if len(split_image) < 2:
        split_image.insert(0, 'docker.io')
    
    matrix.append({
        "registry": split_image[0],
        "image": "/".join(split_image[1:]),
        "version": split_line[1]
    })

# Wrap matrix in a dictionary under the "include" key
json_matrix = json.dumps({"include": matrix})

# Print JSON matrix as an output variable
print(f"::set-output name=matrix::{json_matrix}")



---------- gh workflow--------------------


name: Docker Image

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:

  image-list:
    name: Generate List of Latest Images
    runs-on: ubuntu-22.04

    outputs:
      matrix: ${{ steps.image-list.outputs.matrix }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3.5.2

    - name: Install JQ
      run: sudo apt-get install jq

    - name: Get Image list
      id: image-list

      run: |
        sed -i '/^$/d' images.txt
        content=$(cat images.txt)
        json_content=$(jq -R -s -c 'split("\n")[:-1] | map(split(":")) | map({registry: .[0], image: .[1], version: .[2]})' <<< "$content")
        json_content="{\"include\":$json_content}"
        echo $json_content
        echo "matrix=$json_content" >> $GITHUB_OUTPUT

  update_images:
    name: Update ${{ matrix.registry }}/${{ matrix.image }}:${{ matrix.version }}
    needs: image-list
    runs-on: org-runner
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.image-list.outputs.matrix)}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3.5.2

      - name: install snyk
        run: |
          curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod 777 ./snyk
          sudo mv ./snyk /usr/local/bin/
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Login to Artifactory
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ secrets.ARTIFACTORY_URL }}
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout repo
        uses: actions/checkout@v3.5.2

      - name: Install AWS CLi v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          echo "Verify aws version"
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "arn:aws:iam::590360573099:role/ecr-custom-role"
          aws-region: us-east-1
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        if: ${{ matrix.registry == '590360573099.dkr.ecr.us-east-1.amazonaws.com' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create directories for history and failures
        run: |
          mkdir -p ${{ github.workspace }}/history
          mkdir -p ${{ github.workspace }}/failures

      - name: Run Shell Script
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          chmod +x syncImages.sh
          # Assuming the script has a non-zero exit code on failure
          if ./syncImages.sh -i ${{ matrix.registry }}/${{matrix.image}}:${{ matrix.version }} --scanTool snyk; then
            # On success, move the image list to the history folder
            mv images.txt ${{ github.workspace }}/history/
          else
            # On failure, move the image list to the failures folder
            mv images.txt ${{ github.workspace }}/failures/
          fi

      - name: Upload history and failures as workflow artifacts
        uses: actions/upload-artifact@v2
        with:
          name: image-lists
          paths: 
          - ${{ github.workspace }}/history/
          - ${{ github.workspace }}/failures/

