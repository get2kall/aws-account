name: Docker Image

on:
  push:
    branches:
      - develop

permissions:
  id-token: write
  contents: write

jobs:
  image-list:
    name: Generate List of Latest Images
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.image-list.outputs.matrix }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install JQ
        run: sudo apt-get install jq -y

      - name: Get Image list
        id: image-list
        run: |
          content=$(jq -c . < images.json)
          content="{\"include\":$content}"
          echo $content
          echo "matrix=$content" >> $GITHUB_ENV

  update_images:
    name: Update ${{ matrix.registry }}/${{ matrix.image }}:${{ matrix.version }}
    needs: image-list
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.image-list.outputs.matrix)}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Snyk
        if: ${{ matrix.scanTool == 'snyk' }}
        run: |
          curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
          chmod 777 ./snyk
          sudo mv ./snyk /usr/local/bin/
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Install Wiz
        if: ${{ matrix.scanTool == 'wizcli' }}
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
        run: |
          curl -o wizcli https://wizcli.app.wiz.io/latest/wizcli
          chmod +x wizcli
          sudo mv wizcli /usr/local/bin/
          wizcli auth --id $WIZ_CLIENT_ID --secret $WIZ_CLIENT_SECRET

      - name: Login to Artifactory
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ secrets.ARTIFACTORY_URL }}
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install AWS CLI v2
        if: ${{ matrix.registry == '590360573099.dkr.ecr.us-east-1.amazonaws.com' }}
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          echo "Verify AWS version"
          aws --version

      - name: Configure AWS credentials
        if: ${{ matrix.registry == '590360573099.dkr.ecr.us-east-1.amazonaws.com' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "arn:aws:iam::590360573099:role/ecr-custom-role"
          aws-region: us-east-1
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        if: ${{ matrix.registry == '590360573099.dkr.ecr.us-east-1.amazonaws.com' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: develop

      - name: Run Shell Script
        id: run_script
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
        run: |
          chmod +x syncImages.sh
          if ./syncImages.sh -i ${{ matrix.registry }}/${{ matrix.image }}:${{ matrix.version }} --scanTool snyk; then
            echo "${{ matrix.registry }},${{ matrix.image }},${{ matrix.version }},snyk,success,$(date)" >> result-${{ matrix.image }}.txt
            python process_results.py "${{ matrix.registry }}" "${{ matrix.image }}" "${{ matrix.version }}" "snyk" "success"
          else
            echo "${{ matrix.registry }},${{ matrix.image }},${{ matrix.version }},snyk,failure,$(date)" >> result-${{ matrix.image }}.txt
            python process_results.py "${{ matrix.registry }}" "${{ matrix.image }}" "${{ matrix.version }}" "snyk" "failure"
          fi

      - name: Upload result files as artifact
        uses: actions/upload-artifact@v3
        with:
          name: scan-result
          path: result-*.txt

  collect-result:
    needs: update_images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download result files as artifact
        uses: actions/download-artifact@v3
        with:
          name: scan-result
          path: .

      - name: Execute Python script
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: pip install pymysql
      - name: Execute Python script to process results
        run: python process_results.py
