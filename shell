#!/bin/bash

function print_help {
  echo
  echo "usage: $0 -i,--imageUrl <imageUrl> -f,--file <file>,-s, --scanTool <Scan Tool> -l,--thresholdLevel <Scan Threshold Level> -o,--operation <operation> --platform <platform> -h,--help"
  echo
  echo "An utility script to download docker images and push them into massmutual private repository."
  echo
  echo "Parameters:"
  echo "-h,--help print this help."
  echo "--imageUrl (Optional) Specify a full image url (Eg. docker/ngnix:latest)."
  echo "--platform (Optional) Specify platform information for the image. Default is linux/amd64."
  echo "--file (Optional) Specify the filename that contains the list of image urls."
  echo "       If both file and imageUrl are not specified, script will automatically look for a file named imageSyncRequest-YYYYMMDD.txt"
  echo "--scanTool (Optional) Specify a value a tool that should be used for scanning. Allowed values are either wizcli, snyk. Default is snyk."
  echo "--thresholdLevel (Optional) Specify a value for Snyk Threshold Level. Default is Critical."
  echo "--operation (Optional) Specify a value for operation to be performed. Supported values are Build, Scan, Push. Default is Push, which performs all operations."
  echo
}

colorOff='\033[0m'
imageRef=""
file=""
defaultPlatform="linux/amd64"
defaultSnykThresholdLevel="critical"
operation="Push"
defaultScanningTool="snyk"
mm_repository_name="docker"

while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -h | --help)
      print_help
      exit 1
      ;;
    -f | --file)
      file=$2
      if [[ -z "$2" ]]; then
        echo -e "\033[1;31m!!! Missing value for file parameter !!!${colorOff}"
        print_help
        exit
      fi
      shift
      shift
      ;;
    -s | --scanTool)
      defaultScanningTool=$2
      if [[ -z "$2" ]]; then
        echo -e "\033[1;31m!!! Missing value for scanning tool parameter !!!${colorOff}"
        print_help
        exit
      fi
      shift
      shift
      ;;
    -l | --thresholdLevel)
      defaultSnykThresholdLevel=$2
      if [[ -z "$2" ]]; then
        echo -e "\033[1;31m!!! Missing value for Snyk Threshold Level parameter !!!${colorOff}"
        print_help
        exit
      fi
      shift
      shift
      ;;
    -o | --operation)
      operation=$2
      if [[ -z "$2" ]]; then
        echo -e "\033[1;31m!!! Missing value for operation parameter !!! Supported Values are Build, Scan Or Push. ${colorOff}"
        print_help
        exit
      fi
      shift
      shift
      ;;
    -i | --imageUrl)
      imageRef=$2
      if [[ -z "$2" ]]; then
        echo -e "\033[1;31m!!! Missing value for imageUrl parameter !!!${colorOff}"
        print_help
        exit
      fi
      shift
      shift
      ;;
    -f | --platform)
      defaultPlatform=$2
      if [[ -z "$2" ]]; then
        echo -e "\033[1;31m!!! Missing value for build platform !!!${colorOff}"
        print_help
        exit
      fi
      shift
      shift
      ;;
    *)                   # unknown option
      shift              # past argument
      ;;
  esac
done

if [[ ! "${operation}" == "Build" && ! "${operation}" == "Scan" && ! "${operation}" == "Push" ]]; then
    echo -e "\033[1;31m!!! Incorrect value for operation parameter !!! Supported Values are Build, Scan Or Push. ${colorOff}"
    print_help
    exit
fi;

dockerPath=$(command -v docker)
if [[ -z "$dockerPath" ]]; then
    echo "!!! Docker not found. Please install docker and try again !!!"
    exit
fi;

wizCliPath=""
if [[ "${defaultScanningTool}" == "wizcli" ]]; then
    wizCliPath=$(command -v wizcli)
    if [[ -z "$wizCliPath" ]]; then
        echo "!!! Wiz CLI not found. Please install Wiz CLI, Authenticate and try again !!!"
        echo "*** Go to https://docs.wiz.io/wiz-docs/docs/set-up-wiz-cli and follow instruction for setup instructions."
        exit
    else
        ${wizCliPath} docker scan --image abc 2> /dev/null
        if (( $? == 3 )); then
            echo "!!! Wiz CLI is not yet authenticated. Please authenticate to proceed !!!"
            exit
        fi
    fi;
fi;

snykPath=""
if [[ "${defaultScanningTool}" == "snyk" ]]; then
    snykPath=$(command -v snyk)
    if [[ -z "$snykPath" ]]; then
        echo "!!! Snyk CLI not found. Please install Snyk CLI and try again !!!"
        exit
    fi;
fi;

dockerMsg=$(docker ps)
if [[ ! "$dockerMsg" =~ "CONTAINER" ]]; then
    echo "!!! Trouble running Docker commands. Cannot continue !!!"
    exit
fi;

if [[ ! -d "./docker-build-tmp" ]]; then
    mkdir ./docker-build-tmp
fi

if [[ -f "./docker-build-tmp/imageList.txt" ]]; then
    rm -f ./docker-build-tmp/imageList.txt
fi

if [[ -f ${file} ]]; then
    cat ${file} > ./docker-build-tmp/imageList.txt
else
    if [[ ! -z "${imageRef}" ]]; then
        echo ${imageRef} > ./docker-build-tmp/imageList.txt
    fi
fi;

if [[ ! -f "./docker-build-tmp/imageList.txt" ]]; then
    lookupFile="./imageSyncRequest-"$(date  +%Y%m%d)".txt"
    if [[ -f "${lookupFile}" ]]; then
        cp "${lookupFile}" ./docker-build-tmp/imageList.txt
    else
        echo "!!! Missing image sync request file [$lookupFile]. Cannot continue !!!"
    fi
fi;

registryUrl=${MM_REGISTRY_URL}
if [[ -z ${registryUrl} ]]; then
    registryUrl="artifactory.awsmgmt.massmutual.com"
fi;

if [[ ! -z "${mm_repository_name}" ]]; then
    repositoryName=${mm_repository_name}
else
    repositoryName="docker"
fi;

if [[  -f "./docker-build-tmp/imageList.txt" ]]; then
    for imageUrl in $(cat "./docker-build-tmp/imageList.txt" ); do
        errorCode=0
        isProceed=false

        echo
        echo "Processing imageUrl=$imageUrl..."
        echo
        imageSourceRegistry=$(echo $imageUrl | awk -F'/' '{print $1}')
        imageInfo=$(echo $imageUrl | awk -F'/' '{print $NF}')

        imageSourceName=$(echo $imageInfo | cut -d: -f1)
        imageSourceTag=$(echo $imageInfo | cut -d: -f2)

        if [ "${imageSourceName}" = "${imageSourceTag}" ]; then
            imageSourceTag="latest"
        fi;

        if [ "${imageSourceRegistry}" = "${imageUrl}" ]; then
            imageRegistry=$imageSourceName
        fi;

        imageSourceRepository=$(echo $imageUrl | cut -d'/' -f2- | sed 's,/[^/]*$,,')
        if [ "${imageSourceRepository}" = "${imageInfo}" ]; then
            imageSourceRepository=""
        fi;

        imageDesitination="${registryUrl}/${repositoryName}"
        if [[ ! -z ${imageSourceRepository} ]]; then
            imageDesitination+=/${imageSourceRepository}
        fi;
        imageDesitination+=/${imageSourceName}:${imageSourceTag}

        if [[ "${imageSourceRegistry}" =~ "dkr.ecr" && "${imageSourceRegistry}" =~ "amazonaws.com" ]]; then
            awsResponseMsg=$(aws sts get-caller-identity > /dev/null 2>&1)
            if [[ $? -ne 0 ]]; then
                echo -e "\033[0;33m!!! Unable to login into AWS account. Skipping request for image [${imageUrl}] !!!\033[0m"
                continue;
            fi

            dockerMsg=$(aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 755674844232.dkr.ecr.us-east-1.amazonaws.com)
            if [[ "$dockerMsg" =~ "Login Succeeded" ]]; then
                isProceed=true;
                echo "Docker login successful, proceeding..."
            else
                echo -e "\033[0;33m!!! Unable to login into docker. Skipping request for [${imageUrl}]. Error: [$dockerMsg] !!!\033[0m"
                continue;
            fi
        else
            isProceed=true;
        fi

        if [[ ${isProceed} ]] && [[ "${operation}" == "Build" || "${operation}" == "Scan" || "${operation}" == "Push" ]]; then
            if [[ "${imageSourceRegistry}" = "docker" ]]; then
                pullImage="docker.io"
            else
                pullImage="${imageSourceRegistry}"
            fi

            if [[ ! -z ${imageSourceRepository} ]]; then
                pullImage+=/"${imageSourceRepository}"
            fi;
            pullImage+=/"${imageSourceName}:${imageSourceTag}"

            cat <<EOF > ./docker-build-tmp/dockerfile
FROM ${pullImage}
LABEL maintainer="Cloud Platform Engineering <CloudPlatformEngineering@massmutual.onmicrosoft.com>"
LABEL cpe_base_image=${imageSourceName}:${imageSourceTag} creator="CPE" base_image_support="Cloud Platform Engineering <CloudPlatformEngineering@massmutual.onmicrosoft.com>"
EOF

            echo "Triggering docker build with platform as [${defaultPlatform}] for image [${imageDesitination}] using [${pullImage}] as base image ..."
            echo
            docker build --platform=${defaultPlatform} -t ${imageDesitination} ./docker-build-tmp

            errorCode=$?
            echo "Docker build for image [${imageDesitination}] using [${pullImage}] as base image is complete. Return code [${errorCode}]."

            if (( $errorCode == 0 )) && [[ "${operation}" == "Scan" || "${operation}" == "Push" ]]; then

                if [[ "${defaultScanningTool}" == "wizcli" ]]; then
                    echo
                    echo "Triggering Wiz Vulnerability Scanning for image [${imageDesitination}] with severity-threshold value [$defaultSnykThresholdLevel] ..."
                    echo
                    ${wizCliPath}  docker scan --image ${imageDesitination}

                    errorCode=$?
                    echo "Wiz Vulnerability Scanning for image [${imageDesitination}] with severity-threshold value [$defaultSnykThresholdLevel] is complete. Return code [${errorCode}]."
                fi;
                if [[ "${defaultScanningTool}" == "snyk" ]]; then
                    echo
                    echo "Triggering Snyk Vulnerability Scanning for image [${imageDesitination}] with severity-threshold value [$defaultSnykThresholdLevel] ..."
                    echo
                    ${snykPath}  container test --insecure ${imageDesitination} --fail-fast --severity-threshold=$defaultSnykThresholdLevel

                    errorCode=$?
                    echo "Snyk Vulnerability Scanning for image [${imageDesitination}] with severity-threshold value [$defaultSnykThresholdLevel] is complete. Return code [${errorCode}]."
                fi;

                if (( $errorCode == 0 )); then
                    if [[ "${operation}" == "Push" ]]; then
                        echo
                        echo "Pushing image ${imageDesitination} ..."
                        echo
                        docker push ${imageDesitination}

                        errorCode=$?

                        if (( $errorCode == 0 )); then
                            echo -e "\033[0;32mImage [${imageUrl}] has been successfully published into massmutual private repository...\033[0m"
                            echo
                        fi;
                    else
                        echo -e "\033[0;32mImage [${imageUrl}] has been successfully pulled and scanned. No vulnerabilities found at ${defaultSnykThresholdLevel} level...\033[0m"
                        echo
                    fi;
                else
                    echo -e "\033[47m\033[1;31m!!! ${defaultSnykThresholdLevel} vulnerability found for [${pullImage}]. Image will not be processed for repository push !!!\033[0m"
                    echo
                    exit 1;
                fi;
            fi;
        fi;
    done;
else
    print_help;
fi;

if [[ -d ./docker-build-tmp ]]; then
    rm -rf ./docker-build-tmp
fi;
